(defvar wal-theme-path
  "~/.cache/wal/colors.json"
  "Location of the colors.json file generated by wal.")

(use-package ewal)
(require 'ewal)

(setq wal-colors
  '((:foreground . (ewal-load-color 'white))
    (:background . (ewal-load-color 'black))
    (:cursor . (ewal-load-color 'white))
    (:mode-line . (ewal-load-color 'blue))
    (:region . (ewal-load-color 'white))
    (:secondary-selection . (ewal-load-color 'white))
    (:font-lock-builtin-face . (ewal-load-color 'white))
    (:font-lock-comment-face . (ewal-load-color 'white))
    (:font-lock-function-name-face . (ewal-load-color 'white))
    (:font-lock-keyword-case . (ewal-load-color 'white))
    (:font-lock-string-face . (ewal-load-color 'white))
    (:font-lock-type-face . (ewal-load-color 'white))
    (:font-lock-constant-face . (ewal-load-color 'white))
    (:font-lock-variable-name-face . (ewal-load-color 'white))
    (:minibuffer-prompt . (ewal-load-color 'white))
    (:font-lock-warning-face . (ewal-load-color 'white))))

(defun wal-color (key)
  (eval (cdr (assq key wal-colors))))

(setq fred
      '((default ((t (:foreground ,(wal-color :foreground) :background ,(wal-color :background) ))))
        (cursor ((t (:background ,(wal-color :background) ))))
        (fringe ((t (:background ,(wal-color :background) ))))
        (mode-line ((t (:foreground ,(wal-color :foreground) :background ,(wal-color :mode-line) ))))
        (region ((t (:background ,(wal-color :region) ))))
        (secondary-selection ((t (:background ,(wal-color :secondary-selection) ))))
        (font-lock-builtin-face ((t (:foreground ,(wal-color :font-lock-builtin-face) ))))
        (font-lock-comment-face ((t (:foreground ,(wal-color :font-lock-comment-face) ))))
        (font-lock-function-name-face ((t (:foreground ,(wal-color :font-lock-function-name-face) ))))
        (font-lock-keyword-face ((t (:foreground ,(wal-color :font-lock-keyword-case)))))
        (font-lock-string-face ((t (:foreground ,(wal-color :font-lock-string-face) ))))
        (font-lock-type-face ((t (:foreground ,(wal-color :font-lock-type-face) ))))
        (font-lock-constant-face ((t (:foreground ,(wal-color :font-lock-constant-face) ))))
        (font-lock-variable-name-face ((t (:foreground ,(wal-color :font-lock-variable-name-face) ))))
        (minibuffer-prompt ((t (:foreground ,(wal-color :minibuffer-prompt) :bold t ))))
        (font-lock-warning-face ((t (:foreground ,(wal-color : font-lock-warning-face) :bold t ))))))


(deftheme wal "Use wal colors."
  (custom-theme-set-faces 'wal ,fred))

(provide-theme 'wal)
